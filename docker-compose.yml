version: "3.8"

services:

    redis:
        container_name: redis
        image: redis:alpine
        command: redis-server
            --requirepass 651651c1F028!@
            --appendonly yes
        ports:
            - "6379:6379"
        volumes:
            - redisdata:/code
        networks:
            - storeapi-network

    data:
        container_name: sqlserver
        image: mcr.microsoft.com/mssql/server:2019-latest
        ports:
            - "1433:1433"
        environment:
            - ACCEPT_EULA=Y
            - SA_PASSWORD=651651c1F028!@
        volumes:
            - sqldata:/var/opt/mssql
        networks:
            - storeapi-network

    identity:
        container_name: identity
        image: zlatkorusev/microservices-architecture-identity-service
        build:
            context: ./Server
            dockerfile: ./Identity.Web/Dockerfile
        ports:
            - "5001:80"
        env_file: Server/StoreApi/.env
        environment:
            - ConnectionStrings__DefaultConnection=Server=sqlserver;Database=StoreAppIdentityDB;User Id=sa; Password=651651c1F028!@;MultipleActiveResultSets=true
        restart: on-failure
        volumes:
            - data-protection:/root/.aspnet/DataProtection-Keys
        networks:
            - storeapi-network
        depends_on:
            - data

    customer:
        container_name: customers
        image: zlatkorusev/microservices-architecture-customers-service
        build:
            context: ./Server
            dockerfile: ./Customer.Web/Dockerfile
        ports:
            - "5003:80"
        env_file: Server/StoreApi/.env
        environment:
            - ConnectionStrings__DefaultConnection=Server=sqlserver;Database=StoreAppCustomerDB;User Id=sa; Password=651651c1F028!@;MultipleActiveResultSets=true
        restart: on-failure
        volumes:
            - data-protection:/root/.aspnet/DataProtection-Keys
        networks:
            - storeapi-network
        depends_on:
            - data

    statistics:
        container_name: statistics
        image: zlatkorusev/microservices-architecture-statistics-service
        build:
            context: ./Server
            dockerfile: ./Statistics.Web/Dockerfile
        ports:
            - "5005:80"
        env_file: Server/StoreApi/.env
        environment:
            - ConnectionStrings__DefaultConnection=Server=sqlserver;Database=StoreAppStatisticsDB;User Id=sa; Password=651651c1F028!@;MultipleActiveResultSets=true
            - ConnectionStrings__RedisConnection=redis:6379,password=651651c1F028!@
        restart: on-failure
        volumes:
            - data-protection:/root/.aspnet/DataProtection-Keys
        networks:
            - storeapi-network
        depends_on:
            - data

    order:
        container_name: orders
        image: zlatkorusev/microservices-architecture-orders-service
        build:
            context: ./Server
            dockerfile: ./Order.Web/Dockerfile
        ports:
            - "5014:80"
        env_file: Server/StoreApi/.env
        environment:
            - ConnectionStrings__DefaultConnection=Server=sqlserver;Database=StoreAppOrdersDB;User Id=sa; Password=651651c1F028!@;MultipleActiveResultSets=true
        restart: on-failure
        volumes:
            - data-protection:/root/.aspnet/DataProtection-Keys
        networks:
            - storeapi-network
        depends_on:
            - data
    admin:
        container_name: admin
        image: zlatkorusev/microservices-architecture-admin-service
        build:
            context: ./Server
            dockerfile: ./Admin.Web/Dockerfile
        ports:
            - "50400:80"
        env_file: Server/StoreApi/.env
        volumes:
            - data-protection:/root/.aspnet/DataProtection-Keys
        restart: on-failure
        networks:
            - storeapi-network

    customer_gateway:
        container_name: customers_gateway
        image: zlatkorusev/microservices-architecture-customers-gateway-service
        build:
            context: ./Server
            dockerfile: ./Customer.Gateway.Web/Dockerfile
        ports:
            - "5007:80"
        env_file: Server/StoreApi/.env
        restart: on-failure
        networks:
            - storeapi-network

    notification:
        container_name: notifications
        image: zlatkorusev/microservices-architecture-notifications-service
        build:
            context: ./Server
            dockerfile: ./Notifications.Web/Dockerfile
        ports:
            - "5011:80"
        env_file: Server/StoreApi/.env
        restart: on-failure
        networks:
            - storeapi-network

    messages:
        container_name: rabbitmq
        image: rabbitmq:3-management
        ports:
            - "15672:15672"
            - "5672:5672"
        hostname: "rabbitmq"
        environment:
            - RABBITMQ_ERLANG_COOKIE=Rand0mR4bbitMqCo0k1e
            - RABBITMQ_DEFAULT_USER=rabbitmq
            - RABBITMQ_DEFAULT_PASS=rabbitmq
        networks:
            - storeapi-network

    monitoring:
        container_name: monitoring
        image: zlatkorusev/microservices-architecture-monitoring-service
        build:
            context: ./Server
            dockerfile: ./Monitoring.Watchdog/Dockerfile
        ports:
            - "5013:80"
        env_file: Server/StoreApi/.env
        restart: on-failure
        networks:
            - storeapi-network

    client:
        container_name: client
        image: zlatkorusev/microservices-architecture-client
        build:
            context: ./Client
            dockerfile: ./Dockerfile
        ports:
            - "3000:3000"
        volumes:
            - "./Client:/client/app"
            - "/client/app/node_modules"
        environment:
            - CHOKIDAR_USEPOLLING=true
        restart: on-failure
        networks:
            - storeapi-network
        depends_on:
            - data

networks:
    storeapi-network:

volumes:
    redisdata:
    sqldata:
    data-protection: